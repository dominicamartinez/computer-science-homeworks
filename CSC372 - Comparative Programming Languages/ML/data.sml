(* variables used for testing *)
val test1 = [["A", "B", "B", "A", "B"],["B", "B", "A"],["A", "B"]];
val test2 = ("Joe",
    "BBBABBABBBBABABBBBABAABBBBBBBBBBBBBBBBBBBBBBBABBBBBBBABBBBABBBBBBBAABB");
val test3 = [5,55,30,95];
val test4 = ("Joe", [90, 95, 65, 85], "INFP");
val test5 = ("Sam", [5, 55, 30, 95], "ENTP");

(* returns a tuple obtained by splitting the list into two lists, the *)
(* values in odd positions and the values in even positions           *)
fun split(list) =
    let fun move([], lst2, lst3) = (lst2, lst3) |
            move([a], lst2, lst3) = (a::lst2, lst3) |
            move(a::b::lst1, lst2, lst3) = move(lst1, a::lst2, b::lst3)
    in move(list, [], [])
    end;

(* merge two sorted lists of ints returning the merged list *)
fun merge2(list1,[],f) = list1 |
    merge2([],list2,f) = list2 |
    merge2(a::lst1,b::lst2,f) =
        if f(a,b) then a::merge2(lst1,b::lst2,f)
        else b::merge2(a::lst1,lst2,f);

(* sort a list of ints using merge sort and return sorted list *)
fun msort2([],f) = [] |
    msort2([a],f) = [a] |
    msort2(list, f) =
        let fun dosort(list1, list2) =
	    merge2(msort2(list1,f), msort2(list2,f), f)
        in dosort(split(list))
        end;

(* returns the list obtained by mapping function f over the list *)
fun map(f,[]) = [] |
    map(f,a::rest) = f(a)::map(f,rest);

(* translates a string of 70 A's and B's into 4 lists of A's and B's *)
exception not_multiple_7;
fun translate1(string) =
    let fun build(l1,l2,l3,l4,[]) = [l1,l2,l3,l4] |
            build(l1,l2,l3,l4,a::b::c::d::e::f::g::rest) =
                build(a::l1,b::c::l2,d::e::l3,f::g::l4,rest) |
            build(a) = raise not_multiple_7
    in build([],[],[],[],map(str, explode(string)))
    end;

(* reduces a list to a single element by applying function f *)
exception empty_reduce;
fun reduce(f,[]) = raise empty_reduce |
    reduce(f,[a]) = a |
    reduce(f,a::rest) = f(a,reduce(f,rest));

(* a combination of functions used to produce pretty output *)
(* when done with the assignment, type: displayall(answer); *)
fun repeat(str,n) =
    if n <= 0 then ""
    else str ^ repeat(str,n-1);
fun ljustify(str, n) = str ^ repeat(" ", n - size(str));
fun rjustify(str, n) = repeat(" ", n - size(str)) ^ str;
fun displaynums(list) =  reduce(op ^, 
	map(fn(x) => rjustify(x, 6), map(Int.toString, list:int list)));
fun display1(a, b, c) = ljustify(a, 35) ^ displaynums(b) ^ "  " ^ c ^ "\n";
fun displayall(list) = print(reduce(op ^,map(display1, list)));

(* raw data used for this assignment *)
val data = [
("Adrian Zmed", "BAAAABABAABBAAABAAAAABBBBBAABBBABAABABAABBBBBABBABBBAAAAABABBAABBBABAA"),
("AngelOfMusic", "BBAABAABBBBBAAABABBAAAABBBAABAAABBBAABABBBBBABBAAAABABAABAAABAABABAAAA"),
("Count Chocula", "BAAABBAABBBBBABBABAABBABBAABBABBABAAABABBABBBAABBBAABBAABBABBABBBAABBA"),
("GUNDAM", "BABABBABABBBAABAABBAAABBBBAABAABBBABAABBBBBBBABAABAAAAAABAABBABBBAABAB"),
("Guillaume", "AABAAAAAABBABAABABAABBBBAAABAABABBBAABAAABAABABBAAAABBABAAABAAAAABAABA"),
("JMatt", "AABAABBAABAABBBBAAABBBBBAABAABBAABBAAAAABBBBBAAABAABAABBBBAAABBAAAAABB"),
("John McWilliams", "BAABBBAABBBBBAABABAABBABBABBBAABBBBAABABBBBBBBBAABBABBBABBABBBBABBBBBB"),
("Louis", "BABBBAABBABAAABBBABABBBBABAAAABABBBBBAAAAABAAAAAAABBBAABBBBAAABABABBBB"),
("Steven Bloxham", "BBBABBABBBBABABBABAAABBBABAABABABABBABBABABBAABAABAAAAABBAABBAABAAABAA"),
("Teds Mom", "AABABBBAABBBBBBBAABABBBAAABBAABBBBAAABBABABBBAAAABABABBBBABBBBBAABBBBB"),
("The Yellow Dart", "BABAAAABABBAAAABAAAAAAABAAAAABBABAABAAAABABABABBBAAAAAAAAAAAAABAABAAAA"),
("VashDaStampede", "BABAABABBBBBAAABBBAAAAABBBABBAAABBABBBAAAABBBABAABAABBAAABBBBAAABBBAAA"),
("aballow", "BBBAAAAABBBAAAABABAAABBBAAABBBAABBBBBABAAABABAABABABAAAAABAAAAABAAAAAA"),
("abroad", "BBAAAABAAABBAABAABAABBABABABBBBAABABABBBBABABBBABBAABAAAAAAABAABBABAAA"),
("adamp", "BABAAAAAABBABAABBAAABABBAAAAAABABBBAABAABBBBBAABABABAABABBBABBBABBAAAA"),
("agupta", "BABABAABABBBAABAABAAABABAAABAABAAAAAAAAAAABAAABAAABAAAAABBABBAAAAAAAAA"),
("andrewo", "ABBBBABABBBBBAABBBBBBBBBBBBBABBBBBBABABBBBBBBABBAABBABBAABBABBBABAABAB"),
("aozora", "BABABBAABBBBBAAAABAAABAABBABBBAABBBAABBBABBABABBABAAABAABBAABAAABBBAAA"),
("ashinoha", "BAAAABAAAABAAAABABAABBABABAAAABABBBAAAAABBBABABBABABAAABAAAAABABBABAAA"),
("bahern", "BABAAAABAAAAAAABAAAABBAAAAAABAAAABABAABAAABABABAABAAAAAABAAAAAABAAAAAA"),
("baldwina", "BBBAAAABBBBBAABABAAAABBBABAAABBAABABABAAAABABABAABAAAAAABABAAAABABAAAA"),
("benc", "BBBAAABABBBBBABBBBABABBBBABBBABABBBABABABBBBBAABABABAABABBABBBBBBBAABB"),
("billn", "BABAAAABBBAAAABBBAAAAABBAAAABABAAABBAABAAABBAAAAABBBAAAAABBAAAABBAAAAA"),
("bjordan", "AABABBABBBBBBABBABBAAABBAAAAABABBBBAABAABABABBBAAAAAAABAABABBBBABBABAB"),
("blikes", "AABBAAAAAABBAABBBAAABBABAAABAABABBAAAABBAAAABABABAAAABAABAAABAAAABAABB"),
("bmathews", "AABAABAABBBBBAABABAABAABBBABAABABBBBAABAAABABBBAAAAAABAABBABBAAAABABAA"),
("boomster", "BAAABAAABAABAAAAABAAAABBAAABAABABBABABBAABBAAABBBBBAAAAAAAAAAABABBBAAA"),
("branchaw", "BBBAAAABBBAAAABAAAAAABBBAAAABBBAAAAABAAAAABBBAAAABAAAAAABBAAABABAAAABA"),
("brooks", "BAAAAAABAAAABABAAAAAABAAAAAABABAAAABAABAAABAAABAABAAAAAABAABAAABAABAAA"),
("campa", "BABABAABBBBABAAABBAAAABBBBBABABABBABABAAAAABBABABAAAABBBBBABBAABBBABAA"),
("cburg", "BAAAABAAABBABAABABAAAABAAAABBAABABBBABAAABBBABBAABBBAAABBAABAABBABAAAA"),
("cgang", "BABAABABBBBABABBBAAAABABAAAABBAABBAAABBABBBBBABAABAAAABBBAAABABBABABAA"),
("chanc", "BAAAAAAAAABBAAAABBBAAABBBBABBABAABAAABAAAAABBBAAAAAAAAAABAAAAABABBABAA"),
("cheny", "BAAAAAABAABBAABAABAABBAAAAABAABAAAAAABAAAABAAAAAABAAAAAAAAAABAAABAABAA"),
("cronenbe", "BABAABAAAABAAAABAAAABBABAAABABAABBABABAABBBBBABBABABAABABAAABABAABAAAB"),
("cwong", "AABBAABBBBBABABAAAAABABBAABBAAAABBBAAABAABAABABAAAABAABBBBAAABBAABABBB"),
("dchin", "BABABBAABABBBAABBAAABAAAABABBAABBAABAAAABABABABAAAAAAAAAAAABBAABBBAAAA"),
("devereau", "BAAAAAABABABAAAAAAAABABBABBBBBAAABAAAAAAAABBAAAAABABBAABBAAAAAABBAABAA"),
("devin townsend", "AABAAABBBABABAABABBBAABBBABABBBABABBABABBABBAABBABABABBBBAAABBAAABABAA"),
("dominicm", "BABBBBABAABABABBABAABABBAAABAAABBBAAABABBBBABBBAABABBABAABABBBAAAAABAA"),
("ecoppus", "AABAABAAABBBBAAAABBABAAABABABAABABAAAAABBBBBBBBBABAAABAAAAABAAAAABBBAA"),
("ericah", "BBBABBABBBBAAABBABBAAABABBAABBBBBBBBABABBBBBBABBABBABAAABBABBAABABAABA"),
("gbaker", "BBBAABABBABAAABBABAAABBBBAAABBBBBAABAAAABABBBABAABAAAAAABAAABBAAAAAAAA"),
("gergelyk", "AABAABBABBBAAAABAAAABAAAAABABBBAABAAAABAABBBBABAAAABAABAAAAAABBAAAAABB"),
("glazat", "BBBAAABBBBAABAABAAAABBABBAAABBAABAABBAAAAABBBABAABABAAABBBABBABAAAAAAA"),
("gregw", "BABAAAAAABBBAABBAAAABBBAAAAABABAABAAAABAAABBAABABBAAAABAAAAABBABAAABAB"),
("gzheng", "BABAABABBBBBBABBAAAAABBBAAAABBAAABABAABAAABABABAABAAAAAABBAAAAABAAAAAA"),
("hall", "BABAABABABABBAABABAABBAAAABABBAAABABAABAAABABAAAABABAAAABBAAAAABAAABAA"),
("healyk", "BABABABABBBBAABBBBAABABBBAABBBBABBBBABABBABBBBBBBBBBAABBABBBBAAAABABAA"),
("hilld", "BABBAABBBBBABABABAAABBBBABBBBBABBBBBABAABBBBBABBBBABAAAABABBBBABABBABB"),
("ian", "BABBBAAABBBBBABAABAABABBABABBABBBBBAABBBBBBBAABAAABAAABABAAABAABABBBBA"),
("jbacker", "BABAAAABABBAAABAAAAABBABAAABBABABBABAAAAAABABAAABAAAAAAABAAABBABABAAAA"),
("jmccain", "BABABABBBBBBBAABABAAAABBAAABBAAABBABABBAAABABBAAABABAAAABBABAAABBABAAB"),
("josephe", "BBBBABBBBBBBBAABBBBAAABBBBABAABBBBBBBAABBBBBBBBBAAAAABBAABABABBABABABA"),
("jpeters", "BABAAAABAAAABABBAABAAABAABAABAABBAABABBAAABBBAAAABBBAAABBBAAAAAAABAAAA"),
("jrobaina", "AABBABAAAABBBAABBBAAAABBBAABAABBBBAAAABBBBBABABAAAABAAAAAAAAABAABABBAA"),
("jsamdal", "BABBAAABBBBAAABBABAAAABABBABBABBAAABAABAAABBBABAABAABAAAABAAAAABABBBAA"),
("jungwoo", "BABAAAAABAAAAAAAAAAAAAABAAAAAABABBAAAAAAAABABAAAAAAAAAAABAAAAAABBAAAAA"),
("jvyas", "AABABBBABBBBBAABBBBAABBAAAAAAAAABAAAAABBABABABBAAAABBAABABBBABBABBBABA"),
("kersten", "AABAAAAAAAAABAABAAAAAABBBAABAABABAAAAAAAABBAAABAAAAAAABABAAAAAAAAAABBA"),
("kevind", "BAAABAAAAABBBABBAABABBBAAAABBBABBBBAAAABAABBBAABABABAABABABABAABAAAABA"),
("leec", "BABABAABBABBBAABBBAABBABBBBBABBABBBABBABBABBBABBABABABABBABBBBBBBBBBAB"),
("li", "BBABBABAABBBBAAABBBBBAABABBABABBBBBABBBBBBBABBBBBAAABBBABBBBBBBABBBABB"),
("lina", "BABBAAAAAABBBAABABBABBABBBAABBBAABBBABAAAABAAABAABAAAAAAAABBAAAABBAAAB"),
("marieCurie", "BABAAAABAABBAAABABBAABBABBABBBBAABABBBAAABBBBBBBAAAAAABBABABBAABABBABA"),
("mattheww", "BABAABAAABAABAABAAAABABBAAAAAAAAABBAAAAABBBBBABAABABAABABABAABBBAAAABB"),
("mccortc", "AABAABBABABAAABAAAAAAABBAAABABAAABAAAAAAABBABAAAAAAAAABABAABABAAAAAABB"),
("mcduffeu", "AABBAABABBAABAABBBAABABBBBBBABBBABBABBABBBABBAAAAAABAAABBBABBABABABBAB"),
("mentat23", "BBBABBAABBBBBAABBBABBBBBBBABBBAABBBABBBBBABBBBABABABAAAABBBBBBBBBAAABA"),
("mfrancis", "BABAAAABABBBBAAABAAABBBABBABBABABAABBBABBABABBBAABAAABAABBABBAABAABBAA"),
("mit", "BBABAAAAAABBAAABABAAAAABBAABBABBABAAABBBAABABBBAABABAAAAAAABAABABBAAAA"),
("mkline", "BBBAAAABABBABABBABAABABBAABABAAABBABABAABABBBAAAABAAAAABBAABBAAAABBAAA"),
("mlotti", "BBBAABABABABBABAAAAAABBBAAAAAAAAAAAAAABABABBBAAABBAAAAAABBBAABAABABBBB"),
("mmiles", "BABBAAABBBABAABBBAAAAAABAAAABABABBAAABAAABBBBBBBABAABAABABBBBAAABABBAA"),
("mmueller", "BABAABABAABABABBAAAABBBAAAAABBBAABABAABABABABAAAABAAAAAABBBAAAABAAAAAA"),
("msweeney", "AABAAAAAAABAAAABAAAAABBBAAAAAABAABAAABAAAABABABAAAAAAAAABAAAAAABAAAAAB"),
("mu", "babbbaaabbbabaababbabbbbbaaaabababbaaabbbababbbaabaababbbbaabababbaaab"),
("muhariz", "BBBBBBABBBBBBAABABBABBABBBBBBABBBBBABABBBBBABABAAABBABBABBABBABABAABBB"),
("mydata.txt", "ABBBBABABBBBAAABBBABBAABBABAABBBABBABBAAABBBABBBAAABBBAABBBBBABABBBBAB"),
("mzz", "BAABBABBABBBBABABBBAABABBBABBBABBBBAAABABABBBBBBABAABBBBBBBBABABBABAAA"),
("nick", "BABAABABAAAABAAAABAAABAAAAABBAAABBABAABABBBAAABAABAAAAAABAAABAAAAAAAAA"),
("nihir", "BBABBBBAABBBBAAABBBAABABBBABAABBAAAABBBBBABABABBBBBBBBBAABBBBBAABBAAAA"),
("nolan", "BBBABAABBBAABAABABBAAABAAAABABBABBBABBBABBABBBBABAABABAABBBBBABBBAABBB"),
("patela", "AABAABAAABBABAABAAAAABAABBBBAAAAAAAABABAAABAAABAABABAAAABBAAAAAAAAABAA"),
("rafik", "AABBAAABAABAAAABBBABAAAAAAABBAAAAABAAAAAAAABBABBABAAAAABBAAAAAABBAAAAB"),
("reges", "BBBABAABBBBBBABBBBABBABBBBBBBBBABBBBBBABBBBBBABBABBBBBBBBBABBBBBBBBBBB"),
("rgee", "BBBAAABABBBBBAAABBAABABBBAABAABABBAAABABBBBBBABBABAAABBBBBAABABABAABAA"),
("rodrigof", "BABABAABABBAAAABAAAAABBBABBBABBAABAAABBAAABBBABAAAAABABABAABAAABBAAABB"),
("roedere", "BABAABABABBBAAABABAAABBBAAABAAAABAAAABBAABBBBABAABABAAAABBAABAAAABBAAA"),
("rooks", "BBBAABABBBBAABBBBAABBABBAABBBABAAABBABAABBBBBAABBBABAABABBAAABBBBABABB"),
("rusaphie", "BABAAABAAAABBAAABBAAAAAABABAAAAAABAAAABAABBBAABAABAAAABBBAAAAAABAAABAA"),
("rwortham", "BAABAAABABABAAAAAABAABABBAAABBBAABAAAAAAAABABBBAABAABAABBBABAAABAAABAA"),
("sandhu", "BAABAAABAABAAABAAAAAABBBBAAABABBBAABABBAAABBAABAABABAAAABAAABAABABAAAA"),
("seanf", "BABAAABBBBBBBABBBBAABBBBABAAAABBBBAABABAABBABAAAABBBAAAABABABBBABBAABB"),
("seth", "AABAABBABBBBBABBAABBAABBAAABABBAAAAABAAABBBABABBABABAAAABBBAABBBAAAABB"),
("shafik", "AABAABBAABAABAABAAAABABBBAABABBBAABAAAABAABABAAAAABBAAAABAAABABAAAABBB"),
("shaw", "BABAAAABBABAAABBAABAAABAABABAAABABAAABBBAAABBABBAABBAAAABBAAAAABAAAAAB"),
("sotomaya", "BABAAAABBBBAAABABBAABBABBAAABABABABBAABAABBBAABAABABAAABBBBABAAAAABAAB"),
("srowland", "BABABAABBBBBAAABAAAAAABBBAAAAABABBAABBAAABBABABAABAAAAABABAABAABABABAB"),
("struble", "BBBABBABBBBAAAABBBAAABBBAAABBBBABBABBBAABBBBBABBABABAAAABBABBBBBABAABB"),
("sung", "BABBABABAABABABABBAAAABBAAABBBABBAAAAAAABABABAAAABAAAAAABAAAAAAABAAAAA"),
("thayer", "BBBBBBAABBBBAAAABBAABABBBAABBBBBBBAABBBBAABABABAAAAAABAABBAABAAABBAAAA"),
("tuan", "BAABAABAABBBBABABBBABBABBBBABBABBBAABBBBBABABBAAABBBABBBABBBBAAABBBABB"),
("vsejpal", "BAABAAABABBAAAABABAAABABABAABABBABBBABAAAABBBBAAABABAAAABBAABABBAABBAA"),
("wthiptus", "BABAAAABAAABAAABBAAAABAAAAABAAAAAAAAAAAAAABAAABAABAAAAAAAAAAAAAAAAAAAA"),
("wuk", "BABAABABABAABABBAAAABAAAAAABBAABBAAABBAAAABBBABAABAAAABBAAAAAABBABAAAA"),
("xiey", "BAAAAABBAAABBABBBBAAAAABBBABAABBBABAAAABBABABABABBABAABBAAABBAABBAAAAA")];
